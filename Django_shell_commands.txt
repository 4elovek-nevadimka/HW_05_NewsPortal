Ручной расчет для тестирования

a1=u1='John'
post1(+1), news1(+2), [com3->post2(+1), com6->post2(-1), com7->post3(+1), com11->news3(+1)]
rating = 3*(+1+2) + (+1-1+1+1) + (+2+1)+(+2-1) => 15

a2=u2='Mike'
post2(-1), news2(+3), [com1->post1(+2), com5->post2(-1), com8->post3(-1), com9->news1(-1)]
rating = 3*(-1+3) + (+2-1-1-1) + (+1-1-1+1)+(+1) => 6

a3=u3='Jane'
post3(0), news3(-1), [com2->post1(+1), com4->post2(+1), com10->news2(+1), com12->news1(+2)]
rating = 3*(0-1) + (+1+1+1+2) + (+1-1)+(+1) => 3


Команды Django shell

from news.models import *

# 1.Создать двух пользователей (с помощью метода User.objects.create_user('username')).
u1 = User.objects.create_user(username='John')
u2 = User.objects.create_user(username='Mike')
u3 = User.objects.create_user(username='Jane')

# 2.Создать два объекта модели Author, связанные с пользователями.
a1 = Author.objects.create(user=u1)
a2 = Author.objects.create(user=u2)
a3 = Author.objects.create(user=u3)

# 3.Добавить 4+ категории в модель Category.
cat1 = Category.objects.create(name='Научно-популярное')
cat2 = Category.objects.create(name='Программирование')
cat3 = Category.objects.create(name='DIY или Сделай сам')
cat4 = Category.objects.create(name='Гаджеты')
cat5 = Category.objects.create(name='Информационная безопасность')
cat6 = Category.objects.create(name='Транспорт')

# 4.Добавить 2 статьи и 1 новость.
post1 = Post.objects.create(author=a1, category_type='AR', title='New York — New York: о чём молчат путеводители', text='Нью-Йорк часто называют плавильным котлом США, где 70% жителей – иммигранты или их прямые потомки. Возможно, отсюда — его энергичность, динамизм и пестрота. Здесь самая высокая плотность населения в стране, самое активное использование общественного транспорта, и много ещё чего самого-самого — например, по нему больнее всего ударила пандемия. В целом, он полон контрастов, это не только живой туристический Мидтаун и небоскрёбы, но и ветшающая подземка, нищета Аптауна и бесконечные одноэтажные пригороды. Вместе с частью территории двух соседних штатов Нью-Йорк образует крупнейшую в США агломерацию Tri-State Area. Что накладывает свою специфику не только на саму жизнь, но и муниципальное управление с развитием инфраструктуры.')

post2 = Post.objects.create(author=a2, category_type='AR', title='Какая температура в вакууме', text='Сегодняшний пост будет посвящен вибровакуумной установке с помощью которой, можно дегазировать различные смеси, жидкости, стабилизировать древесину, консервировать старинные находки и даже получать плазму. В ходе поста узнаем какую глубину вакуума способен достичь двухступенчатый пластинчато-роторный насос, почему в процессе работы у него мутнеет масло и какую резину следует использовать в подобных устройствах. Пост обещает быть полезным как сотня лечебных банок, помогающих от всех болезней. Но это не точно!')

post3 = Post.objects.create(author=a3, category_type='AR', title='Нужна ли лямбда?', text='В одной из прошлых статей о NestJS + GraphQL + Lambda я получил очень интересный комментарий. Поэтому и решил поделится своими мыслями и опытом о том, когда все-таки стоит использовать Lambda функцию, а когда - нет.')

news1 = Post.objects.create(author=a1, category_type='NW', title='64-битная Raspberry Pi OS вышла из беты', text='2 февраля 2022 года Raspberry Pi Foundation выпустила первый релиз 64-битной Raspberry Pi OS. Ранее данная версия ОС для микрокомпьютеров Raspberry Pi 3 и Raspberry Pi 4 проходила бета-тестирование, а для пользователей был доступна в качестве стабильной только 32-битная версия.')

news2 = Post.objects.create(author=a2, category_type='NW', title='PlayStation занимает три четверти рынка консольных игр', text='Продажи консольных игр в России составили порядка 1,8 млн штук, что сопоставимо с 2020 годом. Самым популярным тайтлом стал «Одни из нас: Часть II». Высокий интерес к дисковым версиям игр сохранился, несмотря на популярность цифровых сервисов, ограниченное предложение PlayStation 5 и Xbox Series X|S и прекращение поставок консолей прошлого поколения.')

news3 = Post.objects.create(author=a3, category_type='NW', title='В МТИ разработали клейкую ленту для внутренних органов', text='Ученые из Массачусетского технологического института (США) разработали хирургическую клейкую ленту для внутренних органов. С помощью материла можно склеивать небольшие повреждения для устранения разрывов или закреплять лентой наложенные швы.')

# 5.Присвоить им категории (как минимум в одной статье/новости должно быть не меньше 2 категорий).
post1.categories.add(cat1)
post2.categories.add(cat1)
post2.categories.add(cat3)
post3.categories.add(cat2)
post3.categories.add(cat4)
post3.categories.add(cat5)

news1.categories.add(cat2)
news1.categories.add(cat4)
news2.categories.add(cat1)
news2.categories.add(cat6)
news3.categories.add(cat3)
news3.categories.add(cat5)

# 6.Создать как минимум 4 комментария к разным объектам модели Post (в каждом объекте должен быть как минимум один комментарий).
com1 = Comment.objects.create(post=post1, user=a2.user, text='И сто пудов он расчитывает на Starship для выведения.')
com2 = Comment.objects.create(post=post1, user=a3.user, text='Если сторонние заказчики стоят в очереди и ждут своей ракеты - то да, но рынок запусков устроен несколько иначе - нагрузка дороже запуска, и ракета стоит и ждет своей нагрузки.')

com3 = Comment.objects.create(post=post2, user=a1.user, text='Ожидает ещё Starplane запустить.')
com4 = Comment.objects.create(post=post2, user=a3.user, text='Чем он будет существенно отличаться? Скорость света изменится или что-то другое?')
com5 = Comment.objects.create(post=post2, user=a2.user, text='И это всё ради чего?')
com6 = Comment.objects.create(post=post2, user=a1.user, text='Будет, т.к. руководствуется не рациональными доводами, а эмоцианальными типа "Да что себе это щегол позволят!"')

com7 = Comment.objects.create(post=post3, user=a1.user, text='Неустановленное лицо Леха?')
com8 = Comment.objects.create(post=post3, user=a2.user, text='Черт, пробило на ностальгию по 90м')

com9 = Comment.objects.create(post=news1, user=a2.user, text='"Эффект Стрейзанд" во всей красе.')
com10 = Comment.objects.create(post=news2, user=a3.user, text='Ну это как тестирование методом белого ящика.')
com11 = Comment.objects.create(post=news3, user=a1.user, text='Миша, иди поработай.')
com12 = Comment.objects.create(post=news1, user=a3.user, text='Оставьте ссылку на статью с выработанной стратегией, пожалуйста. Может кому-нибудь пригодится.')

# 7.Применяя функции like() и dislike() к статьям/новостям и комментариям, скорректировать рейтинги этих объектов.
post1.like()
post2.dislike()
post3.like()
post3.dislike()
news1.like()
news1.like()
news2.like()
news2.like()
news2.like()
news3.dislike()

com1.like()
com1.like()
com2.like()
com3.like()
com4.like()
com5.dislike()
com6.dislike()
com7.like()
com8.dislike()
com9.dislike()
com10.like()
com11.like()
com12.like()
com12.like()

# 8.Обновить рейтинги пользователей.
a1.update_rating()
a1.rating

a2.update_rating()
a2.rating

a3.update_rating()
a3.rating

# 9.Вывести username и рейтинг лучшего пользователя (применяя сортировку и возвращая поля первого объекта).
Author.objects.all().order_by('-rating').values('user__username','rating').first()

# 10.Вывести дату добавления, username автора, рейтинг, заголовок и превью лучшей статьи, основываясь на лайках/дислайках к этой статье.
# вариант без preview
Post.objects.all().order_by('-rating').values('creation_date', 'author__user__username', 'rating', 'title').first()
# вариант с preview
best_post = Post.objects.all().order_by('-rating').first()
f'{best_post.creation_date} {best_post.author.user.username} {best_post.rating} {best_post.title} {best_post.preview()}'

# 11. Вывести все комментарии (дата, пользователь, рейтинг, текст) к этой статье.
Comment.objects.filter(post=best_post).values('creation_date', 'user', 'rating', 'text')
